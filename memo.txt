トップ画面1（ログイン前）
タイムライン
    ・登録画面
    ・ログイン画面
    ・設定画面

トップ画面2（ログイン後）
タイムライン
    ・登録画面
    ・設定画面
    ・つぶやき投稿画面
    ・ログアウト画面

・バリデーションの実装
　　・日本語文字列はmb_strlenを使用、英数字はstrlenを使用
　　・「email」に関しては、filter_var()関数のFILTER_VALIDATE_EMAILを引数に使用

＜セキュリティ対策＞
-------------------------------------------------------------------------------------------------------------
・XSS（クロスサイトスクリプティング攻撃）対策
【対策】
フォームにjavascriptを仕込まれると簡単に攻撃できてしまうためこれを防ぐために、「htmlspecialchars関数」を使用して、
「<,>,",'」等をHTML文字列に変換してJavascriptプログラムだと認識させないようにできる。
（例）フォームに入力することで警告を出す
<script>alert('攻撃されますよ');</script>
-------------------------------------------------------------------------------------------------------------
・クリックジャッキング対策
クリックジャッキングとは、Webサイト上に隠蔽・偽装したリンクやボタンを設置し、サイト訪問者を視覚的に騙してクリックさせるなど
意図しない操作をするよう誘導させる手法。
【対策】
「PHPファイルに直接『header('X-FRAME-OPTIONS:DENY')』を記述」するか
「サーバーの.htaccessに『Header set X-FRAME-OPTIONS "DENY"』を記述」する。
-------------------------------------------------------------------------------------------------------------
・CSRF(Cross-Site Request Forgeries:クロスサイトリクエストフォージェリ：シーサーフ)対策
ログインした利用者からのリクエストについて、その利用者が意図したリクエストであるかどうかを識別する仕組みを持たないウェブサイトは、
外部サイトを経由した悪意のあるリクエストを受け入れてしまう場合がある。このようなウェブサイトにログインした利用者は、
悪意のある人が用意した罠により、利用者が予期しない処理を実行させられてしまう可能性がある。
【対策】
GET,POSTという1度きりのやりとりではなく、SESSIONという有効期限までの間情報を保持する方法で対策する。
・session_start(); //セッションをスタート
・bin2hex(random_bytes(32)); //安全なバイト列を16進数に変換する
①csrfTokenをセッションに持たせる
<?php           if(!isset($_SESSION['csrfToken'])){
                $csrfToken = bin2hex(random_bytes(32));
                $_SESSION['csrfToken'] = $csrfToken;
            }
            $token = $_SESSION['csrfToken']; 
?>

②inputで仕込んでいたトークンとセッションに持たせていたトークンが一致するか判定する
<?php if($_POST['csrf'] === $_SESSION['csrfToken']) :?>
-------------------------------------------------------------------------------------------------------------

