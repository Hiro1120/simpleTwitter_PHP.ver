トップ画面1（ログイン前）
タイムライン
    ・登録画面
    ・ログイン画面
    ・表紙ページ（アイコン）

トップ画面2（ログイン後）
タイムライン
    ・登録画面
    ・つぶやき投稿画面
    ・ログアウト画面（→ログイン画面へ遷移）
    ・トップ画面

・バリデーションの実装
　　・日本語文字列はmb_strlenを使用、英数字はstrlenを使用
　　・「email」に関しては、filter_var()関数のFILTER_VALIDATE_EMAILを引数に使用


＜セキュリティ対策＞
。ベーシック認証
Web上で利用できる認証システム。Basic認証が設定されているページへアクセスすると、ポップアップが表示されるため、
そこに前もって設定してあったIDとpasswordを入力することで、ログインすることができる。
（例）
 →　password_hash()関数とPASSWORD_BCRYPT（php7からこちら推奨）を使用してパスワードのハッシュ値を設定
(password_hash('simpleTwitter', PASSWORD_BCRYPT));
 【.htaccess(ファイル名)】
AuthType Basic　//ベーシック認証をかける
AuthName "IDとパスワードを入力してください"
AuthUSerFile /Applications/MAMP/htdocs/Udemy1/.htpasswd　//パスのファイルのありかを示す
require varid-user　//認証したいユーザーだけが中に入ることができる
★★★最後は必ず改行を入れること★★★

【.htpasswd（ファイル名）】
フォーマット　→　(id):(password)

※今回は「path.txtファイル」にパスを記述しそのパスを読み込んで変換したハッシュ値を設定した
-------------------------------------------------------------------------------------------------------------
・XSS（クロスサイトスクリプティング攻撃）対策
【対策】
フォームにjavascriptを仕込まれると簡単に攻撃できてしまうためこれを防ぐために、「htmlspecialchars関数」を使用して、
「<,>,",'」等をHTML文字列に変換してJavascriptプログラムだと認識させないようにできる。
（例）フォームに入力することで警告を出す
<script>alert('攻撃されますよ');</script>
-------------------------------------------------------------------------------------------------------------
・クリックジャッキング対策
クリックジャッキングとは、Webサイト上に隠蔽・偽装したリンクやボタンを設置し、サイト訪問者を視覚的に騙してクリックさせるなど
意図しない操作をするよう誘導させる手法。
【対策】
「PHPファイルに直接『header('X-FRAME-OPTIONS:DENY')』を記述」するか
「サーバーの.htaccessに『Header set X-FRAME-OPTIONS "DENY"』を記述」する。
-------------------------------------------------------------------------------------------------------------
・CSRF(Cross-Site Request Forgeries:クロスサイトリクエストフォージェリ：シーサーフ)対策
ログインした利用者からのリクエストについて、その利用者が意図したリクエストであるかどうかを識別する仕組みを持たないウェブサイトは、
外部サイトを経由した悪意のあるリクエストを受け入れてしまう場合がある。このようなウェブサイトにログインした利用者は、
悪意のある人が用意した罠により、利用者が予期しない処理を実行させられてしまう可能性がある。
【対策】
GET,POSTという1度きりのやりとりではなく、SESSIONという有効期限までの間情報を保持する方法で対策する。
・session_start(); //セッションをスタート
・bin2hex(random_bytes(32)); //安全なバイト列を16進数に変換する
①csrfTokenをセッションに持たせる
<?php           if(!isset($_SESSION['csrfToken'])){
                $csrfToken = bin2hex(random_bytes(32));
                $_SESSION['csrfToken'] = $csrfToken;
            }
            $token = $_SESSION['csrfToken']; 
?>

②inputで仕込んでいたトークンとセッションに持たせていたトークンが一致するか判定する
<?php if($_POST['csrf'] === $_SESSION['csrfToken']) :?>
-------------------------------------------------------------------------------------------------------------
・SQLインジェクション対策
アプリケーションが想定しないSQL文を実行させることにより、データベースシステムを不正に操作する攻撃方法のこと。
フォーム欄にSQL文を記載するなど。

【対策】
・プリペアードステートメント
SQL文で値がいつでも変更できるように、変更する箇所のみ命令文を作る仕組みのことです。クエリの実行段階で値を与えるようにする。

・プレースホルダ
「変数のように値が変動する箇所」と「データベースへ登録する処理」の間に挟むことで変動する箇所を「値」として処理するしくみ。
入力フォームに万が一不正な値（SQL文）が入力されても、SQL命令に関わるような殊文字」は無効化されるため、SQL文として実行されることはない。
 →　SQL文の変数部分を「:」で始まる文字列で指定して書く
 （例）$sql = 'SELECT * FROM users where username = :username';

・$db = setAttribute(PDO::ATTR_EMULATE_PREPARES, false)

　SQLインジェクションの対策としてプリペアドステートメントの使用が推奨されますが、PDOにおいてデフォルトではPDO::ATTR_EMULATE_PREPARESがtrueに設定されており、
この状態ではprepareでプレースホルダを指定してもエミュレートされ、実際にMySQLにわたる際にはプリペアドステートメントではなくなってしまう（普通にSQL発行するのと同じ）。
この状態では、 自動エスケープはされるものの 、SQLインジェクションの危険がある。
